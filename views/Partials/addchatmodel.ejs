<div class="modal-wrapper hidden fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50"
    id="add-chat-modal">
    <div class="modal bg-[#121212] rounded-lg shadow-lg p-8 w-full max-w-lg relative">
        <a id="close-add-chat-modal"
            class="modal-close text-gray-400 hover:text-white text-3xl absolute top-4 right-6 transition duration-200">x</a>
        <div class="modal-title mb-6 text-center">
            <h2 class="text-3xl font-semibold text-gray-100 text-start">Start conversation</h2>
        </div>
        <div class="modal-body">
            <form action="/chats" method="post" id="add-chat-form" class="space-y-6">
                <div>
                    <!-- User search input -->
                    <input type="text" placeholder="Search by username" name="search_user_1" id="search_user_1"
                        class="w-full p-3 rounded-lg bg-gray-800 text-gray-200 placeholder-gray-400 focus:ring-2 focus:ring-[#4B20B2] focus:outline-none transition duration-200" />
                    <!-- Error message for username -->
                    <p id="username-error" class="error username-error hidden text-sm text-red-500 mt-1">Please enter a
                        valid username.</p>
                </div>

                <div>
                    <!-- User search results container -->
                    <div id="user_search_results_box" class="space-y-4 max-h-80 overflow-y-scroll">
                        <!-- User search results will be shown here -->
                    </div>
                </div>

                <!-- Common error message -->
                <p id="common-error" class="error common-error hidden text-sm text-red-500 mt-4">Please correct the
                    errors above before submitting.</p>
            </form>
        </div>
    </div>
</div>

<script>
    let searched_user;
    const user_search_results_box = document.getElementById('user_search_results_box');
    const user_Search_input = document.getElementById('search_user_1');
    let userFindTimeOut;

    // Handle user search input with a timeout to prevent multiple requests
    user_Search_input.addEventListener('input', () => {
        clearTimeout(userFindTimeOut);
        user_search_results_box.innerHTML = ''; // Clear previous results
        document.getElementById('common-error').classList.add('hidden'); // Hide common error

        const user_Search_input_value = user_Search_input.value;
        if (user_Search_input_value.length >= 3) {
            userFindTimeOut = setTimeout(async () => {
                // Fetch matching users based on input
                const response = await fetch('/inbox/find_match_users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ search_user_text: user_Search_input_value })
                });

                const result = await response.json();

                if (response.ok) {
                    // If users are found, display them in the results box
                    if (result?.users?.length > 0) {
                        const users = result.users;
                        users?.forEach(user => {
                            let userDev = document.createElement('div');
                            userDev.id = user._id;
                            userDev.classList = 'flex items-center space-x-4 p-3 bg-gray-800 searched_user rounded-lg';

                            // User card with avatar and name/email
                            userDev.innerHTML = `
                             <img src=${'/uploads/avatar/' + user.avatar} alt="User Avatar" class="w-10 h-10 object-cover rounded-full">
                            <div>
                                <p class="text-gray-200 font-semibold">${user.name}</p>
                                <p class="text-gray-400 text-sm">${user.email}</p>
                            </div>
                            `;

                            user_search_results_box.appendChild(userDev);
                        });

                        // Add click event to each user to start conversation
                        document.querySelectorAll('.searched_user').forEach(user => {
                            user.addEventListener('click', (event) => {
                                const clicked_user = event.currentTarget.id;
                                StartConversation(clicked_user); // Trigger chat creation
                            });
                        });
                    } else {
                        console.log('No user found');
                    }
                }
            }, 500); // Delay for input debounce
        }
    });
</script>

<script>




    async function StartConversation(id) {
        console.log(id); // Debug: Log the clicked user id

        // Create a chat with the selected user
        const response = await fetch('/inbox/create_chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ search_user_1: id })
        });

        const result = await response.json();

        if (response.ok) {

            document.getElementById('add-chat-modal').classList.add('hidden');
            console.log('Chat created successfully!');



            chatFetchFn();
            user_search_results_box.innerHTML = '';
            user_Search_input.value = '';





        } else {
            // Error: Display common error message
            document.getElementById('common-error').classList.remove('hidden');
            document.getElementById('common-error').textContent = result.message || 'An error occurred. Please try again.';
        }
    };
</script>

<script>
    const chatFetchFn = async () => {
        try {
            const response = await fetch('/inbox/get_Conversation_list', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },

            });
            const data = await response.json();
            if (data.length > 0) {
                const conversation_list_div = document.getElementById('conversation_list');
                console.log(data)


                conversation_list_div.innerHTML = ` 

                    ${data.map((user) => {
                    return (`<div id=${user._id} class="flex items-center space-x-4 p-4 rounded-lg bg-gray-700 hover:bg-gray-600 transition">
                        <div
                            class="border border-black/10 flex justify-center items-center bg-white/10 rounded-full w-10 h-10">
                           <img src=${'/uploads/avatar/' + user.receiver.avatar} alt="User Avatar" class=" w-8 h-8 object-cover rounded-full">
                        </div>
                        <div class="flex-1">
                            <div class="font-semibold">${user.receiver.name}</div>
                            <div class="text-sm text-gray-400">Apr 16</div>
                        </div>
                        <div class="text-sm text-gray-400">This is a message</div>
                    </div> `)

                }).join('')}
                    `


            }







        } catch (error) {
            console.log(error)

        }


    }
</script>